name: Build, Update Hugo Config, Deploy Hugo site to Pages, Create and Publish Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version for the release using the format <MAJOR>.<MINOR>.<DEBUG>[-<identifier>]'
        required: true
      release_name:
        description: 'Name for the release'
        required: true

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.122.0
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb

      - name: Install Dart Sass Embedded
        if: success()
        run: sudo snap install dart-sass-embedded

      - name: Checkout
        if: success()
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup Pages
        if: success()
        id: pages
        uses: actions/configure-pages@v4

      - name: Setup Node.js
        if: success()
        uses: actions/setup-node@v4
        with:
          node-version: "20.11.0"

      - name: Clear npm cache
        if: success()
        run: npm cache clean --force

      - name: Install Node.js dependencies with npm ci
        if: success()
        run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"

      - name: Update hugo.toml with release version, build datetime and git hash
        if: success()
        run: |
          RELEASE_VERSION=${{ github.event.inputs.version }}
          sed -i "s/version = \".*\"/version = \"$RELEASE_VERSION\"/" hugo.toml

          # Set the build datetime
          buildDatetime=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          sed -i "s/buildDatetime = \".*\"/buildDatetime = \"$buildDatetime\"/" hugo.toml
          
          # Set the git hash
          gitHash=$(git rev-parse --short HEAD)
          sed -i "s/gitHash = \".*\"/gitHash = \"$gitHash\"/" hugo.toml

      - name: Build with Hugo
        if: success()
        env:
          # For maximum backward compatibility with Hugo modules
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: |
          hugo \
              --gc \
              --minify \
              --baseURL "${{ steps.pages.outputs.base_url }}/"

      - name: Upload artifact
        if: success()
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  update-config:
    needs: [build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: always() && success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Update Hugo config with next dev version
        run: |
          NEXT_DEV_VERSION="${{ github.event.inputs.version }}-dev"
          sed -i "s/version = \".*\"/version = \"$NEXT_DEV_VERSION\"/" hugo.toml
          git switch main
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add hugo.toml
          git commit -m "Update Hugo config version to $NEXT_DEV_VERSION"
          git push

  deploy:
    needs: [build, update-config]
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    if: always() && success()
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  create-release:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always() && success()
    steps:
      - name: Create Release
        id: create_release
        run: |
          gh release create "v${{ github.event.inputs.version }}" --title "${{ github.event.inputs.release_name }}" --draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  publish-release:
    needs: [create-release]
    runs-on: ubuntu-latest
    steps:
      - name: Publish Release
        if: always() && success()
        run: |
          gh release publish "v${{ github.event.inputs.version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
