# Check build after pushing on main, during Pull-Request, or manually with any branch, with optional deployment on test environment
name: Check Build

on:
  # Runs on pushes targeting the main branch
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      deploymentEnabled:
        description: "The built website must be deployed"
        required: false
        default: true
        type: boolean

env:
  TARGET_REPOSITORY: "spiges/handbook-test"
  TARGET_BRANCH: "main"
  KEEP_TARGET_HISTORY: false
  DEPLOYED_BASE_URL: "https://spiges.github.io/handbook-test/"
  DEPLOYED_BASE_NAME: "handbook-test"
  # Versions
  HUGO_VERSION: "0.124.1"
  GO_VERSION: "1.22.2"
  NODE_VERSION: "20.12.1"
  DART_SASS_VERSION: "latest/stable" # Only one stable version available through Snap. It is not possible to select a specific version for an extended period.

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  stylelintCheck:
    name: SCSS Lint Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install Node.js dependencies with npm ci
        if: success()
        run: "npm install"
      - name: Test upload package-lock.json
        uses: actions/upload-artifact@v4
        with:
          name: package-lock.json
          path: package-lock.json
      - name: Run reviewdog + action-stylelint with pr-review
        uses: reviewdog/action-stylelint@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          fail_on_error: true
          stylelint_config: ".stylelintrc.json"
          stylelint_input: "**/assets/scss/*.scss"

  eslintCheck:
    name: Javascript Lint Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install Node.js dependencies with npm ci
        if: success()
        run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"
      - name: Run reviewdog + action-eslint with pr-review
        uses: reviewdog/action-eslint@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          filter_mode: nofilter
          fail_on_error: true
          eslint_flags: "--debug --stats --ignore-pattern '{public/,node_modules/}' assets/js/"

  markdownLintCheck:
    name: Markdown Lint Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install markdownlint-cli
        run: npm install -g markdownlint-cli

      - name: Run reviewdog + action-markdownlint with pr-review
        uses: reviewdog/action-markdownlint@v0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          level: warning
          filter_mode: added
          markdownlint_flags: "**/content/**/*.md --ignore node_modules --ignore public"

      - name: Run markdownlint-cli with output to result file
        run: markdownlint --config .markdownlint.json --ignore node_modules --ignore public --output ./lint-results.txt '**/content/**/*.md' || true

      - name: Check if markdownlint result file was created
        run: |
          if [[ -f "./lint-results.txt" ]]; then
            echo "lint-results.txt file was created successfully."
          else
            echo "lint-results.txt file does not exist." >&2
            exit 1
          fi

      - name: Check warning threshold using result file
        run: |
          max_warnings=5
          if [[ -f "./lint-results.txt" ]]; then
            warning_count=$(grep -c '^[^ ]' ./lint-results.txt)
            echo "Total warnings: $warning_count"
            if [[ "$warning_count" -gt "$max_warnings" ]]; then
              echo "::error file=./lint-results.txt,line=1,col=1::Warning threshold exceeded. Total warnings: $warning_count"
              echo "Displaying all warnings from lint-results.txt:"
              cat ./lint-results.txt
              exit 1
            elif [[ "$warning_count" -eq 0 ]]; then
              echo "::notice file=./lint-results.txt,line=1,col=1::No warnings found. Good job!"
            else
              echo "::warning file=./lint-results.txt,line=1,col=1::Warning count is within acceptable limits. Total warnings: $warning_count"
              echo "Displaying all warnings from lint-results.txt:"
              cat ./lint-results.txt
            fi
          else
            echo "::error file=./lint-results.txt,line=1,col=1::File not found for reading warnings count."
            exit 1
          fi
  # Build job
  build:
    name: Build
    needs: [markdownLintCheck]
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          cache: false # to avoid Warning: "Restore cache failed: Dependencies file is not found in /home/runner/work/handbook/handbook. Supported file pattern: go.sum"
          go-version: ${{ env.GO_VERSION }}

      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${{ env.HUGO_VERSION }}/hugo_extended_${{ env.HUGO_VERSION }}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb

      - name: Install Dart Sass
        if: success()
        run: sudo snap install dart-sass --channel=${{ env.DART_SASS_VERSION }}

      - name: Checkout
        if: success()
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        if: success()
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Clear npm cache
        if: success()
        run: npm cache clean --force

      - name: Install Node.js dependencies with npm ci
        if: success()
        run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"

      - name: Update Hugo config
        if: success()
        run: |
          baseURL=${{ env.DEPLOYED_BASE_URL }}
          echo "baseURL: $baseURL"
          sed -i "s|baseURL[[:space:]]*=[[:space:]]*'.*'|baseURL = '$baseURL'|" hugo.toml

          baseName=${{ env.DEPLOYED_BASE_NAME }}
          echo "baseName: $baseName"
          sed -i "s|baseName[[:space:]]*=[[:space:]]*'.*'|baseName = '$baseName'|" hugo.toml

          buildDatetime=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "buildDatetime: $buildDatetime"
          sed -i "s/buildDatetime[[:space:]]*=[[:space:]]*\".*\"/buildDatetime = \"$buildDatetime\"/" hugo.toml

          gitHash=$(git rev-parse --short HEAD)
          echo "git hash: $gitHash"
          sed -i "s/gitHash[[:space:]]*=[[:space:]]*\".*\"/gitHash = \"$gitHash\"/" hugo.toml

          version=$(grep 'version[[:space:]]*=' hugo.toml | sed 's/version[[:space:]]*=[[:space:]]*"\([^"]*\)"/\1/')
          echo "Current version: $version"

          branch_name=$(echo $GITHUB_REF | sed 's|refs/heads/||')
          echo "Current branch: $branch_name" 
          new_version="${version}+${branch_name}"
          echo "New version: $new_version"
          sed -i "s|version[[:space:]]*=[[:space:]]*\"${version}\"|version = \"${new_version}\"|" hugo.toml

      - name: Set Test style (blue lines)
        if: success()
        run: |
          sed -i "s|\$ob-venetian-red:[[:space:]]*#.*;|\$ob-venetian-red: #004ddc;|" assets/scss/_variables_project.scss

      - name: Build with Hugo
        if: success()
        env:
          # For maximum backward compatibility with Hugo modules
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: |
          hugo \
              --gc \
              --minify \
              --baseURL "${{ env.DEPLOYED_BASE_URL }}"

      - name: Copy README.md and LICENSE.md files in public directory
        if: success()
        run: |
          echo "This repository contents the built SpiGes-Documentation project website for testing" > README.md
          cp README.md public/
          cp LICENSE.md public/

      - name: Deploy to the specified environment
        # Runs only if:
        #   previous step successed
        #   AND the trigger is not a pull-request
        #   AND
        #     the trigger is automatic (push)
        #     OR the trigger is manual and 'deploymentEnabled' parameter is true
        if: success() && github.event_name != 'pull_request' && (github.event_name != 'workflow_dispatch' || github.event.inputs.deploymentEnabled == 'true')
        uses: crazy-max/ghaction-github-pages@v4
        with:
          target_branch: ${{ env.TARGET_BRANCH }}
          build_dir: public
          repo: ${{ env.TARGET_REPOSITORY }}
          keep_history: ${{ env.KEEP_TARGET_HISTORY }}
        env:
          GITHUB_TOKEN: ${{ secrets.TEST_REPO_TOKEN }}
