# Build, Deploy Hugo site to Pages, Update Hugo Config, Create Release Draft, Publish Release
name: Release Documentation

on:
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  extract_release_version:
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{ steps.extract.outputs.release_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract release version from hugo.toml
        if: success()
        id: extract
        run: |
          release_version=$(grep 'version[[:space:]]*=' hugo.toml | sed 's/version[[:space:]]*=[[:space:]]*"\([^"]*\)"/\1/')
          echo "Extracted version: $release_version"
          if [[ -z "$release_version" ]]; then
            echo "Release version is empty. Stopping the workflow."
            exit 1
          else
            echo "release_version=$release_version" >> $GITHUB_OUTPUT
          fi

  check_git_tag:
    needs: [extract_release_version]
    runs-on: ubuntu-latest
    if: always() && success()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with: 
          fetch-depth: 0
      
      - name: Check if tag exists
        if: success()
        env:
          RELEASE_VERSION: ${{ needs.extract_release_version.outputs.release_version }}
        run: |
          if git rev-parse "refs/tags/$RELEASE_VERSION" >/dev/null 2>&1; then
            echo "Tag $RELEASE_VERSION already exists."
            exit 1
          else
            echo "Tag $RELEASE_VERSION does not exist."
          fi

  # Build job
  build:
    needs: [check_git_tag]
    runs-on: ubuntu-latest
    if: always() && success()
    env:
      HUGO_VERSION: 0.122.0
    steps:
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb

      - name: Install Dart Sass Embedded
        if: success()
        run: sudo snap install dart-sass-embedded

      - name: Checkout
        if: success()
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Pages
        if: success()
        id: pages
        uses: actions/configure-pages@v4

      - name: Setup Node.js
        if: success()
        uses: actions/setup-node@v4
        with:
          node-version: "20.11.0"

      - name: Clear npm cache
        if: success()
        run: npm cache clean --force

      - name: Install Node.js dependencies with npm ci
        if: success()
        run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"

      - name: Update hugo.toml with build datetime and git hash
        if: success()
        run: |
          # Set the build datetime
          buildDatetime=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          sed -i "s/buildDatetime[[:space:]]*=[[:space:]]*\".*\"/buildDatetime = \"$buildDatetime\"/" hugo.toml
          
          # Set the git hash
          gitHash=$(git rev-parse --short HEAD)
          sed -i "s/gitHash[[:space:]]*=[[:space:]]*\".*\"/gitHash = \"$gitHash\"/" hugo.toml

      - name: Build with Hugo
        if: success()
        env:
          # For maximum backward compatibility with Hugo modules
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: |
          hugo \
              --gc \
              --minify \
              --baseURL "${{ steps.pages.outputs.base_url }}/"

      - name: Upload artifact
        if: success()
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  deploy:
    needs: [build]
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    if: always() && success()
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  create-release:
    needs: [deploy, extract_release_version]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: always() && success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release
        if: success()
        id: create_release
        env:
          RELEASE_VERSION: ${{ needs.extract_release_version.outputs.release_version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "release version = $RELEASE_VERSION"
          gh release create "v$RELEASE_VERSION" --title "Release $RELEASE_VERSION" --notes-file RELEASE_NOTE.md --draft
          
  publish-release:
    needs: [create-release, extract_release_version]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: always() && success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Publish Release
        env:
          RELEASE_VERSION: ${{ needs.extract_release_version.outputs.release_version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "release version = $RELEASE_VERSION"
          gh release edit "v$RELEASE_VERSION" --draft=false
