# Check automatically, after pushing on main, the build of Hugo site
name: Auto Check Build

on:
  # Runs on pushes targeting the main branch
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      deploymentEnabled:
        description: 'The built website must be deployed'
        required: false
        default: true
        type: boolean

env:
  TARGET_REPOSITORY: 'spiges/handbook-test'
  TARGET_BRANCH: 'main'
  KEEP_TARGET_HISTORY: false
  DEPLOYED_BASE_URL: 'https://spiges.github.io/handbook-test/'
  DEPLOYED_BASE_NAME: 'handbook-test'
  # Versions
  HUGO_VERSION: "0.122.0"
  GO_VERSION: "1.22"
  NODE_VERSION: "20.11.0"
  DART_SASS_VERSION: "1.71.0"
        
# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${{ env.HUGO_VERSION }}/hugo_extended_${{ env.HUGO_VERSION }}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb    

      - name: Install Dart Sass
        if: success()
        run: sudo snap install dart-sass --channel=stable/${{ env.DART_SASS_VERSION }}

      - name: Checkout
        if: success()
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        if: success()
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Clear npm cache
        if: success()
        run: npm cache clean --force
          
      - name: Install Node.js dependencies with npm ci
        if: success()
        run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"

      - name: Update Hugo config
        if: success()
        run: |
          baseURL=${{ env.DEPLOYED_BASE_URL }}
          echo "baseURL: $baseURL"
          sed -i "s|baseURL[[:space:]]*=[[:space:]]*'.*'|baseURL = '$baseURL'|" hugo.toml

          baseName=${{ env.DEPLOYED_BASE_NAME }}
          echo "baseName: $baseName"
          sed -i "s|baseName[[:space:]]*=[[:space:]]*'.*'|baseName = '$baseName'|" hugo.toml

          buildDatetime=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "buildDatetime: $buildDatetime"
          sed -i "s/buildDatetime[[:space:]]*=[[:space:]]*\".*\"/buildDatetime = \"$buildDatetime\"/" hugo.toml

          gitHash=$(git rev-parse --short HEAD)
          echo "git hash: $gitHash"
          sed -i "s/gitHash[[:space:]]*=[[:space:]]*\".*\"/gitHash = \"$gitHash\"/" hugo.toml

          version=$(grep 'version[[:space:]]*=' hugo.toml | sed 's/version[[:space:]]*=[[:space:]]*"\([^"]*\)"/\1/')
          echo "Current version: $version"

          branch_name=$(echo $GITHUB_REF | sed 's|refs/heads/||')
          echo "Current branch: $branch_name" 
          new_version="${version}-${branch_name}"
          echo "New version: $new_version"
          sed -i "s|version[[:space:]]*=[[:space:]]*\"${version}\"|version = \"${new_version}\"|" hugo.toml
          
      - name: Set Test style (blue lines)
        if: success()
        run: |
          sed -i "s|\$ob-venetian-red:[[:space:]]*#.*;|\$ob-venetian-red: #004ddc;|" assets/scss/_variables_project.scss

      - name: Build with Hugo
        if: success()
        env:
          # For maximum backward compatibility with Hugo modules
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: |
            hugo \
                --gc \
                --minify \
                --baseURL "${{ env.DEPLOYED_BASE_URL }}"

      - name: Copy README.md and LICENSE.md files in public directory
        if: success()
        run: |
          echo "This repository contents the built SpiGes-Documentation project website for testing" > README.md
          cp README.md public/
          cp LICENSE.md public/

      - name: Deploy to the specified environment
        # Runs only if:
        #   previous step successed
        #   AND the trigger is not a pull-request
        #   AND 
        #     the trigger is automatic (push)
        #     OR the trigger is manual and 'deploymentEnabled' parameter is true
        if: success() && github.event_name != 'pull_request' && (github.event_name != 'workflow_dispatch' || github.event.inputs.deploymentEnabled == 'true')
        uses: crazy-max/ghaction-github-pages@v4
        with:
          target_branch: ${{ env.TARGET_BRANCH }}
          build_dir: public
          repo: ${{ env.TARGET_REPOSITORY }}
          keep_history: ${{ env.KEEP_TARGET_HISTORY }}
        env:
          GITHUB_TOKEN: ${{ secrets.TEST_REPO_TOKEN }}
